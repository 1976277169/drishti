# Copyright (c) 2015, Ruslan Baratov
# Copyright (c) 2016, David Hirvonen
# All rights reserved.

cmake_minimum_required(VERSION 3.1) # CMP0054

if("@ADB_COMMAND@" STREQUAL "")
  message(FATAL_ERROR "Expected ADB_COMMAND")
endif()

if("${APP_SOURCE}" STREQUAL "")
  message(FATAL_ERROR "Expected APP_SOURCE")
endif()

if("@TESTING_DIR@" STREQUAL "")
  message(FATAL_ERROR "Expected TESTING_DIR")
endif()

if("@APP_TARGET@" STREQUAL "")
  message(FATAL_ERROR "Expected APP_TARGET")
endif()

if("@RESOURCE_DIR@" STREQUAL "")
  message(FATAL_ERROR "Expected RESOURCE_DIR")
endif()

set(exe_dir "@TESTING_DIR@/bin")
set(libs_dir "@TESTING_DIR@/lib")
set(data_dir "@TESTING_DIR@/data")

message("Using '@ADB_COMMAND@'")

message("Creating directory on Android device: '${exe_dir}'")
set(cmd "@ADB_COMMAND@" shell mkdir -p "${exe_dir}")
execute_process(COMMAND ${cmd} RESULT_VARIABLE result)
if(NOT result EQUAL 0)
  message(FATAL_ERROR "Command failed: ${cmd}")
endif()

set(exe_path "${exe_dir}/@APP_TARGET@")

message("Push executable to Android device:")
message("  '${APP_SOURCE}'")
message("  -> '${exe_path}'")

set(cmd "@ADB_COMMAND@" push "${APP_SOURCE}" "${exe_path}")
execute_process(COMMAND ${cmd} RESULT_VARIABLE result)
if(NOT result EQUAL 0)
  message(FATAL_ERROR "Command failed: ${cmd}")
endif()

message("Set executable permissions (777)")
set(cmd "@ADB_COMMAND@" shell chmod 777 "${exe_path}")
execute_process(COMMAND ${cmd} RESULT_VARIABLE result)
if(NOT result EQUAL 0)
  message(FATAL_ERROR "Command failed: ${cmd}")
endif()

message("Creating directory on Android device: '${data_dir}'")
set(cmd "@ADB_COMMAND@" shell mkdir -p "${data_dir}")
execute_process(COMMAND ${cmd} RESULT_VARIABLE result)
if(NOT result EQUAL 0)
  message(FATAL_ERROR "Command failed: ${cmd}")
endif()

set(app_arguments "@APP_ARGUMENTS@")
set(arguments)
foreach(arg ${app_arguments})
  string(
      REGEX REPLACE "^\\$<DRISHTI_RESOURCE_FILE:\(.*\)>$" "\\1" resource "${arg}"
  )
  if("${resource}" STREQUAL "${arg}")
    # nothing replaced => not a resource
    set(arguments "${arguments} \"${arg}\"")
  else()
    # '$<DRISHTI_RESOURCE_FILE:...>' detected => resource file
    message("Resource detected: '${resource}'")
    if(NOT IS_ABSOLUTE "${resource}")
      set(resource "@RESOURCE_DIR@/${resource}")
    endif()
    if(NOT EXISTS "${resource}")
      message(FATAL_ERROR "File not found: ${resource}")
    endif()
    get_filename_component(res_name "${resource}" NAME)
    set(res_path "${data_dir}/${res_name}")
    set(arguments "${arguments} \"${res_path}\"")

    message("Push resource to Android device:")
    message("  '${resource}'")
    message("  -> '${res_path}'")

    set(cmd "@ADB_COMMAND@" push "${resource}" "${res_path}")
    execute_process(COMMAND ${cmd} RESULT_VARIABLE result)
    if(NOT result EQUAL 0)
      message(FATAL_ERROR "Command failed: ${cmd}")
    endif()
  endif()
endforeach()

if(NOT "${LINKED_LIBS}" STREQUAL "")
  message("Creating directory on Android device: '${libs_dir}'")
  set(cmd "@ADB_COMMAND@" shell mkdir -p "${libs_dir}")
  execute_process(COMMAND ${cmd} RESULT_VARIABLE result)
  if(NOT result EQUAL 0)
    message(FATAL_ERROR "Command failed: ${cmd}")
  endif()

  message("Uploading dependent libraries to Android device")
  string(REPLACE "," ";" LINKED_LIBS "${LINKED_LIBS}")
  foreach(x ${LINKED_LIBS})
    get_filename_component(lib_name "${x}" NAME)
    set(lib_path "${libs_dir}/${lib_name}")

    message("  '${x}'")
    message("  -> '${lib_path}'")

    set(cmd "@ADB_COMMAND@" push "${x}" "${lib_path}")
    execute_process(COMMAND ${cmd} RESULT_VARIABLE result)
    if(NOT result EQUAL 0)
      message(FATAL_ERROR "Command failed: ${cmd}")
    endif()
  endforeach()
endif()

message("Set LD_LIBRARY_PATH to '${libs_dir}'")
message("Run command on Android device:")
message("[@TESTING_DIR@]> \"${exe_path}\" ${arguments}")
execute_process(
    COMMAND
    "@ADB_COMMAND@" shell "cd \"@TESTING_DIR@\"; export LD_LIBRARY_PATH=\"${libs_dir}\"; \"${exe_path}\" ${arguments}; echo $?"
    RESULT_VARIABLE result
    OUTPUT_VARIABLE output
    ERROR_VARIABLE output
    OUTPUT_STRIP_TRAILING_WHITESPACE
    ERROR_STRIP_TRAILING_WHITESPACE
)
if(NOT result EQUAL 0)
  message(FATAL_ERROR "Command failed")
endif()

message("Command output (with exit code):")
message("*** BEGIN ***")
message("${output}")
message("*** END ***")

string(REGEX REPLACE ".*\n" "" last_output_line "${output}")
string(COMPARE EQUAL "${last_output_line}" "0" is_ok)
if(NOT is_ok)
  message(
      FATAL_ERROR
      "Command exits with error code: ${last_output_line}"
  )
endif()

message("Done")
